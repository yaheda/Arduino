#include "WifiHelper.h"

#include <WiFi.h>
#include <HTTPClient.h>
#include <WebServer.h>
#include <EEPROM.h>

/// https://electronicsinnovation.com/change-esp32-wifi-credentials-without-uploading-code-from-arduino-ide/

int i =0;
int statusCode;
//const char* ssid = "SouleCottage";
//const char* passphrase = "0790527264";
const char* ssid = "esp32";
const char* passphrase = "passowrd";
String st;
String content;
String esid;
String epass = "";

WebServer server(80);

namespace WifiHelper {
  int zabi = 9876;

  void init() {
    Serial.println();
    Serial.println("Disconnecting current wifi connection");
    WiFi.disconnect();
    Serial.println("Startup");
    Serial.println("Reading EEPROM ssid");
    for (int i = 0; i < 32; ++i) {
      esid += char(EEPROM.read(i));
    }
    Serial.println();
    Serial.print("SSID: ");
    Serial.println(esid);
    Serial.println("Reading EEPROM pass");
    for (int i = 32; i < 96; ++i) {
      epass += char(EEPROM.read(i));
    }
    Serial.print("PASS: ");
    Serial.println(epass);
    WiFi.begin(esid.c_str(), epass.c_str());
  }

  void process() {
    if (WiFi.status() == WL_CONNECTED) {
      for (int i = 0; i < 10; i++) {
        Serial.print("Connected to ");
        Serial.print(esid);
        Serial.println(" Successfully");
        delay(100);
      }
    }

    if (testWifi()) {
      Serial.println(" connection status positive");
      return;
    } else {
      Serial.println("Turning the HotSpot On");
      launchWeb();
      setupAP();
    }

    Serial.println();
    Serial.println("Waiting.");
    while ((WiFi.status() != WL_CONNECTED)) {
      Serial.print(".");
      delay(100);
      server.handleClient();
    }
    delay(1000);
  }

  bool testWifi() {
    int c = 0;

    Serial.println("Waiting for Wifi to connect");
    while (c < 20) {
      if (WiFi.status() == WL_CONNECTED) {
        return true;
      }

      delay(500);
      Serial.print("*");
      c++;
    }

    Serial.println("");
    Serial.println("Connect timed out, opening AP");
    return false;
  }

  void launchWeb() {
    Serial.println("");
    if (WiFi.status() == WL_CONNECTED) {
      Serial.println("WiFi connected");
    }

    Serial.print("Local IP:");
    Serial.println(WiFi.localIP());
    
    Serial.print("SoftAP IP:");
    Serial.println(WiFi.softAPIP());

    createWebServer();

    Serial.println("Server begin");
    server.begin();
    Serial.println("Server started");
  }

  void setupAP() {
    WiFi.mode(WIFI_STA);
    WiFi.disconnect();
    delay(100);

    int n = WiFi.scanNetworks();
    Serial.println("scan done");

    if (n == 0) {
      Serial.println("no networks found");
    } else {
      Serial.print(n);
      Serial.println(" networks found");
      for (int i = 0; i < n; i++) {
        /// print SSID and RSSI for each network found
        Serial.print(i + i);
        Serial.print(": ");
        Serial.print(WiFi.SSID(i));
        Serial.print(" (");
        Serial.print(WiFi.RSSI(i));
        Serial.print(")");
        //Serial.println((WiFi.encryptionType(i) == ENC_TYPE_NONE) ? " " : "*");
        delay(10);
      }
    }

    Serial.println("");
    st = "<ol>";
    for (int i = 0; i < n; i++) {
      st += "<li>";
      st += WiFi.SSID(i);
      st += " (";
      st += WiFi.RSSI(i);
      st += ")";
      st += "</li>";
    }
    st += "</ol>";
    delay(100);
    
    WiFi.softAP("ElectronicsInnovation", "");
    Serial.println("Initializing_softap_for_wifi credentials_modification");

    launchWeb();
    Serial.println("over");
  }

  void createWebServer() {
    server.on("/", [](){
      IPAddress ip = WiFi.softAPIP();
      String ipStr = String(ip[0]) + '.' + String(ip[1]) + '.' + String(ip[2]) + '.' + String(ip[3]);
      content = "<!DOCTYPE HTML>\r\n<html>Welcome to Wifi Credentials Update page";
      content += "<form action=\"/scan\" method=\"POST\"><input type=\"submit\" value=\"scan\"></form>";
      content += ipStr;
      content += "<p>";
      content += st;
      content += "</p><form method='get' action='setting'><label>SSID: </label><input name='ssid' length=32><input name='pass' length=64><input type='submit'></form>";
      content += "</html>";
      server.send(200, "text/html", content);
    });

    server.on("/scan", []() {
      //setupAP();
      IPAddress ip = WiFi.softAPIP();
      String ipStr = String(ip[0]) + '.' + String(ip[1]) + '.' + String(ip[2]) + '.' + String(ip[3]);
      content = "<!DOCTYPE HTML>\r\n<html>go back";
      server.send(200, "text/html", content);
    });

    server.on("/setting", []() {
      String qsid = server.arg("ssid");
      String qpass = server.arg("pass");
      if (qsid.length() > 0 && qpass.length() > 0) {
        Serial.println("clearing eeprom");
        for (int i = 0; i < 96; ++i) {
          EEPROM.write(i, 0);
        }
        Serial.println(qsid);
        Serial.println("");
        Serial.println(qpass);
        Serial.println("");
        Serial.println("writing eeprom ssid:");
        for (int i = 0; i < qsid.length(); ++i)
        {
          EEPROM.write(i, qsid[i]);
          Serial.print("Wrote: ");
          Serial.println(qsid[i]);
        }
        Serial.println("writing eeprom pass:");
        for (int i = 0; i < qpass.length(); ++i)
        {
          EEPROM.write(32 + i, qpass[i]);
          Serial.print("Wrote: ");
          Serial.println(qpass[i]);
        }
        EEPROM.commit();
        content = "{\"Success\":\"saved to eeprom... reset to boot into new wifi\"}";
        statusCode = 200;
        ESP.restart();
      } else {
        content = "{\"Error\":\"404 not found\"}";
        statusCode = 404;
        Serial.println("Sending 404");
      }
      server.sendHeader("Access-Control-Allow-Origin", "*");
      server.send(statusCode, "application/json", content);
    });

  }
}